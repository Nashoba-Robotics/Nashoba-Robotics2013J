// robotBuilder Version: 0.0.2
//
// This file was generated by robotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from robotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package edu.nr.main.commands;
import edu.wpi.first.wpilibj.command.Command;
import edu.nr.main.RobotMain;
import edu.nr.main.Gamepad;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
/**
 *
 */
public class  DriveBase extends Command {
    private float snapx;
    private float snapy;
    private float snapz;
    
    public double lastExecuteTime;

    public DriveBase() {
        
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(RobotMain.drive);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if(RobotMain.oi.getPadRawAxis(Gamepad.kDPadXAxis)  > 0)
        {
                RobotMain.drive.driveMecanum(-0.2f, 0, 0);
        }
        else if(RobotMain.oi.getPadRawAxis(Gamepad.kDPadXAxis) < 0)
        {
                RobotMain.drive.driveMecanum(0.2f, 0, 0);
        }
        else if(RobotMain.oi.getPadRawAxis(Gamepad.kDPadYAxis)  > 0)
        {
                RobotMain.drive.driveMecanum(0, 0.2f, 0);
        }
        else if(RobotMain.oi.getPadRawAxis(Gamepad.kDPadYAxis)  < 0)
        {
                RobotMain.drive.driveMecanum(0, -0.2f, 0);
        }
        else
        {        
            /***********
             * FIXME Some of the axes are reversed!
             ***********/
            //SNAP X
            if(RobotMain.oi.getPadRawAxis(Gamepad.kLeftXAxis) < 0.08 && RobotMain.oi.getPadRawAxis(Gamepad.kLeftXAxis) > -0.08)
                    snapx = 0;
            else
                    snapx = RobotMain.oi.getPadRawAxis(Gamepad.kLeftXAxis);
            //SNAP Y
            if(RobotMain.oi.getPadRawAxis(Gamepad.kLeftYAxis) < 0.08 && RobotMain.oi.getPadRawAxis(Gamepad.kLeftYAxis) > -0.08)
                    snapy = 0;
            else
                    snapy = -RobotMain.oi.getPadRawAxis(Gamepad.kLeftYAxis);
            //SNAP Z
            if(RobotMain.oi.getPadRawAxis(Gamepad.kRightXAxis) < 0.08 && RobotMain.oi.getPadRawAxis(Gamepad.kRightXAxis) > -0.08)
                    snapz = 0;
            else
                    snapz = -RobotMain.oi.getPadRawAxis(Gamepad.kRightXAxis);

            //Cut the rotation speed in half (because it is way too fast as it is)
            snapz /= 2;

            snapx *= 0.65;
            snapy *= 0.65;

            //Cut down all the speeds if the right bumper is being held (for fine alignment)
            if(RobotMain.oi.getPadButton(Gamepad.kRightBumper))
            {
                    snapx /= 2;
                    snapy /= 2;
                    snapz /= 2;
            }
            SmartDashboard.putNumber("Snapx", snapx);
            SmartDashboard.putNumber("Snapy", snapy);
            SmartDashboard.putNumber("Snapz", snapz);

            RobotMain.drive.driveMecanum(snapx, snapy, snapz);
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
