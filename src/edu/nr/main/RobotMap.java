// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package edu.nr.main;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.can.*;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap 
{
    public static Relay compressorRelay;
    public static Relay articulatingRelay;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar frontLeftJag;
    public static CANJaguar rearLeftJag;
    public static CANJaguar frontRightJag;
    public static CANJaguar rearRightJag;
    public static RobotDrive nrDrive;
    public static Gyro driveGyro;
    public static CANJaguar shooterJag;
    public static DoubleSolenoid shooterLoaderSolenoid;
    public static Encoder trackEncoder;
    public static AnalogChannel trackForce1;
    public static AnalogChannel trackForce2;
    public static Solenoid trackBrakeSolenoid;
    public static SpeedController trackVic1;
    public static SpeedController trackVic2;
    public static Solenoid tippingSolenoid;
    public static DigitalInput compressorLimiter;
    public static DoubleSolenoid articulatingArmSolenoid;
    public static CANJaguar articulatingArmJag;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() 
    {
		compressorRelay = new Relay(1, Relay.Direction.kForward);
        articulatingRelay = new Relay(2, Relay.Direction.kBoth);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        try { 
            frontLeftJag = new CANJaguar(2);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        
        try { 
            rearLeftJag = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        
        try { 
            frontRightJag = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        
        try { 
            rearRightJag = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        nrDrive = new RobotDrive(frontLeftJag, rearLeftJag, 
                                frontRightJag, rearRightJag);
	
        nrDrive.setSafetyEnabled(false);
        nrDrive.setExpiration(0.1);
        nrDrive.setSensitivity(0.5);
        nrDrive.setMaxOutput(1.0);
        nrDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        nrDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        
        driveGyro = new Gyro(1, 1);
        driveGyro.setSensitivity(0.007);
        try { 
            shooterJag = new CANJaguar(7);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        
        shooterLoaderSolenoid = new DoubleSolenoid(1, 3, 6);      
	
        
        trackEncoder = new Encoder(1, 1, 1, 2, false, EncodingType.k4X);
        trackEncoder.setDistancePerPulse(1.0);
        trackEncoder.setPIDSourceParameter(PIDSourceParameter.kRate);
        trackEncoder.start();

	trackForce1 = new AnalogChannel(1, 3); 
        trackForce2 = new AnalogChannel(1, 4);
        
        trackBrakeSolenoid = new Solenoid(1, 1);
        
        trackVic1 = new Victor(1, 1);
        
        trackVic2 = new Victor(1, 2);
        
        tippingSolenoid = new Solenoid(1, 2);
        
        compressorLimiter = new DigitalInput(1, 3);
        
        articulatingArmSolenoid = new DoubleSolenoid(1, 8, 7);      
	
        try { 
            articulatingArmJag = new CANJaguar(6);
        } catch (CANTimeoutException ex) {
            System.err.println("Could not instantiate jag: " + ex.getMessage());
        }
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}