// robotBuilder Version: 0.0.2
//
// This file was generated by robotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from robotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package edu.nr.main;
import edu.nr.main.commands.dtr_artic_jag;
import edu.nr.main.commands.dpl_cmprs;
import edu.nr.main.commands.drv_brk;
import edu.nr.main.commands.drv_trck;
import edu.nr.main.commands.auton;
import edu.nr.main.commands.idle_artic_jag;
import edu.nr.main.commands.auto_cmprs;
import edu.nr.main.commands.drv_drv;
import edu.nr.main.commands.dpl_trck_brk;
import edu.nr.main.commands.drv_trck_dwn_frce;
import edu.nr.main.commands.dpl_tip;
import edu.nr.main.commands.idle_trck;
import edu.nr.main.commands.sht_load;
import edu.nr.main.commands.dpl_fixed;
import edu.nr.main.commands.undpl_tip;
import edu.nr.main.commands.dpl_artic_sol;
import edu.nr.main.commands.idle_sht;
import edu.nr.main.commands.undpl_fixed;
import edu.nr.main.commands.undpl_trck_brk;
import edu.nr.main.commands.sht_stop;
import edu.nr.main.commands.dtr_cmprs;
import edu.nr.main.commands.idle_tip;
import edu.nr.main.commands.dpl_artic_jag;
import edu.nr.main.commands.undpl_artic_sol;
import edu.nr.main.commands.idle_fixed;
import edu.nr.main.commands.cancel;
import edu.nr.main.commands.sht_four;
import edu.nr.main.commands.sht_start;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class oi 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    gamepad pad;
    xpad xPad;
    public oi() 
    {
        pad = new gamepad(pad.kLeftStick);
        
        xPad = new xpad(xPad.kRightStick);    
        
        JoystickButton lStickButtonX = new JoystickButton(xPad, xPad.kLeftStickButton);
	lStickButtonX.whenPressed(new dpl_tip());
	
	JoystickButton rStickButtonX = new JoystickButton(xPad, xPad.kRightStickButton);
	rStickButtonX.whenPressed(new undpl_tip());
	
	JoystickButton xButtonX = new JoystickButton(xPad, xPad.kXButton);
	xButtonX.whenPressed(new sht_load());
	
	JoystickButton bButtonX = new JoystickButton(xPad, xPad.kBButton);
	bButtonX.whenPressed(new sht_stop());
	
	JoystickButton rBumperButtonX = new JoystickButton(xPad, xPad.kRightBumper);
	rBumperButtonX.whenPressed(new drv_trck(0.3f));
	
	JoystickButton lBumperButtonX = new JoystickButton(xPad, xPad.kLeftBumper);
	lBumperButtonX.whenPressed(new drv_trck(-0.6f));
	
	JoystickButton startButtonX = new JoystickButton(xPad, xPad.kStartButton);
	startButtonX.whenPressed(new dpl_cmprs());
	
	JoystickButton backButtonX = new JoystickButton(xPad, xPad.kBackButton);
	backButtonX.whenPressed(new auto_cmprs());
	
	JoystickButton yButtonX = new JoystickButton(xPad, xPad.kYButton);
	yButtonX.whenPressed(new idle_trck());

	JoystickButton aButtonX = new JoystickButton(xPad, xpad.kAButton);
	aButtonX.whenPressed(new sht_start());
            
                
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Articulating Idle Command", new idle_artic_jag());
        SmartDashboard.putData("Autonomous Command", new auton());
        SmartDashboard.putData("Drive Drive Command", new drv_drv());
        SmartDashboard.putData("Drive Brake Command", new drv_brk());
        SmartDashboard.putData("Shooter Idle Command", new idle_sht());
        SmartDashboard.putData("Shooter Load Command", new sht_load());
        SmartDashboard.putData("Shooter Stop Command", new sht_stop());
        SmartDashboard.putData("Track Idle Command", new idle_trck());
        SmartDashboard.putData("Track Drive Down Until Force Command", new drv_trck_dwn_frce());
        SmartDashboard.putData("Compressor Start Command", new dpl_cmprs());
        SmartDashboard.putData("Compressor Stop Command", new dtr_cmprs());
        SmartDashboard.putData("Tipping Deploy Command", new dpl_tip());
        SmartDashboard.putData("Tipping Undeploy Command", new undpl_tip());
        SmartDashboard.putData("Tipping Idle Command", new idle_tip());
        SmartDashboard.putData("Shoot Four Times Command", new sht_four());
        SmartDashboard.putData("Compressor Automatic Toggle Command", new auto_cmprs());
        SmartDashboard.putData("Track Deploy Brake Command", new dpl_trck_brk());
        SmartDashboard.putData("Track Undeploy Brake Command", new undpl_trck_brk());
        SmartDashboard.putData("Shooter Run Command", new sht_start());
        SmartDashboard.putData("Articulating Extend Command", new dpl_artic_jag());
        SmartDashboard.putData("Articulating unextend Command", new dtr_artic_jag());
        SmartDashboard.putData("Cancel All Command", new cancel());
        SmartDashboard.putData("FixedDeployCommand", new dpl_fixed());
        SmartDashboard.putData("FixedundeployCommand", new undpl_fixed());
        SmartDashboard.putData("FixedIdleCommand", new idle_fixed());
        SmartDashboard.putData("ArticulatingDeployCommand", new dpl_artic_sol());
        SmartDashboard.putData("ArticulatingUndeployCommand", new undpl_artic_sol());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        SmartDashboard.putData("Tipping Idle Command", new idle_tip());
	
	
	SmartDashboard.putData("Tipping Deploy Command", new dpl_tip());
	SmartDashboard.putData("Tipping Undeploy Command", new undpl_tip());
	SmartDashboard.putData("Shooter Load Command", new sht_load());
	SmartDashboard.putData("Shooter Stop Command", new sht_stop());
	SmartDashboard.putData("Track Drive Down Until Force Command", new drv_trck_dwn_frce());
	
	SmartDashboard.putData("Tipping Deploy Command", new dpl_tip());
	SmartDashboard.putData("Tipping Undeploy Command", new undpl_tip());
	SmartDashboard.putData("Shoot Four Times Command", new sht_four());
	SmartDashboard.putData("Shooter Load Command", new sht_load());
	SmartDashboard.putData("Shooter Run Command", new sht_start());
	
	SmartDashboard.putBoolean("Compressor Automatic", false);
	SmartDashboard.putNumber("SD Times Per Second", 5);
	SmartDashboard.putNumber("Shooter Jag Speed", 0);
	SmartDashboard.putNumber("TRACK DOWN SPEED", 0);
        
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    
    public boolean getPadButton(int type)
    {
        return pad.getRawButton(type);
    }
    public float getPadRawAxis(int axis)
    {
        return (float)pad.getRawAxis(axis);
    }
    public float getXPadRawAxis(int axis)
    {
        return (float)xPad.getRawAxis(axis);
    }
    public boolean getXPadButton(int button)
    {
        return xPad.getRawButton(button);
    }
}
